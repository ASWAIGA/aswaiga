openapi: 3.0.3
info:
  version: 1.0.0
  title: ASWAIGA
  description: |-
    This is the Open API documentation for the REST API of our beloved application **ASWAIGA**

    - [The ASWAIGA repository](https://github.com/ASWAIGA/aswaiga)
servers:
  - url: http://3.239.83.88:8080
tags:
  - name: issues
paths:

  /issues:
    get:
      tags:
        - issues
      summary: Show all the issues
      description: Show all the issues
      operationId: showAllIssues
      parameters:
        - name: search
          in: query
          description: Text to search for
          schema:
            type: string
        - name: sort
          in: query
          description: Sort by providing status_asc or priority_asc or assign_to_asc or assignee_asc or created_by_asc
          schema:
            type: string
        - name: filter_assign_to
          in: query
          description: Filter by assignee
          schema:
            type: string
        - name: filter_assignee
          in: query
          description: Filter by assignee
          schema:
            type: string
        - name: filter_created_by
          in: query
          description: Filter by creator
          schema:
            type: string
        - name: filter_status
          in: query
          description: Filter by status
          schema:
            type: string
        - name: filter_priority
          in: query
          description: Filter by priority
          schema:
            type: string
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowIssue'
        '304':
          description: 'Error: Not Modified'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error304'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        '409':
          description: 'Conflict with the operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409'
      security:
        - apiKey: []

    post:
      tags:
        - issues
      summary: Creates a new issue with its parametres
      description: Creates a new issue with its parametres
      operationId: addIssue
      requestBody:
        content:
          application/json:
            schema:
               $ref: '#/components/schemas/IssueCreate'

      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowIssue'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        '409':
          description: 'Conflict with the operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409'
      security:
        - apiKey: []

  /issues/{id}:
    get:
      tags:
        - issues
      summary: Show the issue associated to the id
      description: Show the issue associated to the id
      operationId: ShowIssue
      parameters:
          - name: id
            in: path
            description: ID of the issue you want to show
            required: true
            schema:
              type: integer
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowIssue'
        '304':
          description: 'Error: Not Modified'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error304'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        '409':
          description: 'Conflict with the operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409'
      security:
        - apiKey: []

    put:
      tags:
        - issues
      summary: Update the issue associated to the id
      description: Update the issue associated to the id
      operationId: UpdateIssue
      parameters:
          - name: id
            in: path
            description: ID of the issue you want to update
            required: true
            schema:
              type: integer
      requestBody:
        description: Issue identifier
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueUpdate'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowIssue'
        '304':
          description: 'Error: Not Modified'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error304'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        '409':
          description: 'Conflict with the operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409'
      security:
        - apiKey: []
    delete:
      tags:
        - issues
      summary: Delete the issue associated with the id
      description: Delete the issue associated with the id
      operationId: DeleteIssue
      parameters:
        - name: id
          in: path
          description: ID of the issue you want to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Issue deleted'
        '304':
          description: 'Error: Not Modified'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error304'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        '409':
          description: 'Conflict with the operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409'

  /issues/bulk_insert:
    post:
      tags:
        - issues
      summary: Bulk insert of issues
      description: Bulk insert of issues
      operationId: BulkInsert
      requestBody:
        description: Bulk identifier
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkInsert'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowIssue'
        '304':
          description: 'Error: Not Modified'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error304'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        '409':
          description: 'Conflict with the operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409'
      security:
        - apiKey: []

  /issues/{id}/watchers:
    get:
      tags:
        - issues
      summary: Show the watchers of the issue associated to the id
      description: Show the watchers of the issue associated to the id
      operationId: ShowWacthers
      parameters:
          - name: id
            in: path
            description: ID of the issue you want to show the watchers from
            required: true
            schema:
              type: integer
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowUser'
        '304':
          description: 'Error: Not Modified'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error304'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        '409':
          description: 'Conflict with the operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409'
      security:
        - apiKey: []

  /issues/{id}/addwatchers:
    post:
      tags:
        - issues
      summary: Add watcher to the issue associated to the id
      description: Add watcher to the issue associated to the id
      operationId: AddWatcher
      requestBody:
        description: Watcher identifier
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddWatcher'
      parameters:
          - name: id
            in: path
            description: ID of the issue you want to add a watcher to
            required: true
            schema:
              type: integer
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowUser'
        '304':
          description: 'Error: Not Modified'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error304'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        '409':
          description: 'Conflict with the operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409'
      security:
        - apiKey: []

  /users:
    get:
      tags:
        - user
      summary: Show all the users
      description: Show the user associated to the id
      operationId: ShowAllUsers
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowUser'
        '304':
          description: 'Error: Not Modified'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error304'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        '409':
          description: 'Conflict with the operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409'
      security:
        - apiKey: []

  /users/{id}:
    get:
      tags:
        - user
      summary: Show the user associated to the id
      description: Show the user associated to the id
      operationId: ShowUser
      parameters:
          - name: id
            in: path
            description: ID of the user you want to show
            required: true
            schema:
              type: integer
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowUser'
        '304':
          description: 'Error: Not Modified'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error304'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        '409':
          description: 'Conflict with the operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409'
      security:
        - apiKey: []
    put:
      tags:
        - user
      summary: Update the user associated to the id
      description: Update the user associated to the id
      operationId: UpdateUser
      parameters:
          - name: id
            in: path
            description: ID of the user you want to update
            required: true
            schema:
              type: integer
      requestBody:
        description: User identifier
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowUser'
        '304':
          description: 'Error: Not Modified'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error304'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'

  /issues/{id}/comments:
    get:
      tags:
        - issues
      summary: Comments of an issue
      description: Show the comments of an issue
      operationId: showComments
      parameters:
        - name: id
          in: path
          description: ID of the issue you want to see the comments from
          required: true
          schema:
            type: integer

      responses:
        '200':
          description: 'Successful Operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/showComments'

        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        '409':
          description: 'Conflict with the operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409'
      security:
        - apiKey: []
components:
  schemas:
    ShowIssue:
      type: object
      properties:
        id:
          type: integer
        tipus:
          type: string
        severity:
          type: string
        priority:
          type: string
        issue:
          type: string
        description:
          type: string
          nullable: true
        status:
          type: string
        assign_to:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        url:
          type: string
          format: uri
      example:
        id: 1
        tipus: Bug
        severity: Normal
        priority: Normal
        issue: Hola que tal
        description: Esto es una issue
        status: New
        assign_to: Not Assigned
        created_at: "2023-05-12T10:17:36.259Z"
        updated_at: "2023-05-12T10:17:36.259Z"
        url: "http://IP:8080/issues/1.json"

    ShowUser:
        type: object
        properties:
          id:
            type: integer
          email:
            type: string
          full_name:
            type: string
          uid:
            type: string
          bio:
            type: string
            nullable: true
          created_at:
            type: string
            format: date-time
          updated_at:
            type: string
            format: date-time
          url:
            type: string
            format: uri
        example:
          id: 1
          email: example@gmail.com
          full_name: Example Surexample
          uid: 81723871837
          bio: This is a bio.
          created_at: "2023-05-12T10:17:36.259Z"
          updated_at: "2023-05-12T10:17:36.259Z"
          url: "http://IP:8080/users/1.json"

    IssueUpdate:
      type: object
      properties:
        tipus:
          type: string
        severity:
          type: string
        priority:
          type: string
        issue:
          type: string
        status:
          type: string
        assign_to:
          type: string
        due_date:
          type: string
          format: date
        reason_due_date:
          type: string
        block_status:
          type: boolean
        reason_block:
          type: string
        description:
          type: string
        assignee:
          type: string
      example:
        "issue": {
          "tipus": "Bug",
          "severity": "Normal",
          "priority": "Normal",
          "issue": "New name",
          "status": "In progress",
          "assign_to": "",
          "due_date": "",
          "reason_due_date": "",
          "block_status": true,
          "reason_block": "Prueba",
          "description": "Esto es una prueba",
        }
    UserUpdate:
      type: object
      properties:
        full_name:
          type: string
        bio:
          type: string
          nullable: true
      example:
        "user": {
          "full_name": "Example NewSurname",
          "bio": "This is another bio."
        }

    showComments:
      type: object
      properties:
        issue_id:
          type: integer
        user_name:
          type: string
        text:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      example:
        "comment": {
          "issue_id": 1,
          "user_full_name": "Joel",
          "text": "Intentaré arreglarlo",
        }
    BulkInsert:
      type: object
      properties:
        issue_titles:
          type: array
          items:
            type: string

    AddWatcher:
      type: object
      properties:
        user_ids:
          type: array
          items:
            type: integer

    ErrorResult:
        type: object
        properties:
          status:
            type: integer
            enum: [304, 400, 401, 403, 404, 409]
          error:
            type: string
            enum: ["Not Modified", "Bad Request", "Unauthorized", "Forbidden", "Not Found", "Conflict"]
          message:
            type: string

    IssueCreate:
      type: object
      properties:
        tipus:
          type: string
        severity:
          type: string
        priority:
          type: string
        issue:
          type: string
        status:
          type: string
        assign_to:
          type: string
        due_date:
          type: string
          format: date
        reason_due_date:
          type: string
        block_status:
          type: boolean
        reason_block:
          type: string
        description:
          type: string
        assignee:
          type: string


  examples:
    error304:
      value:
        status: 304
        error: "Not Modified"
        message: "You have already made this action. You can not do it twice."
    error400:
      value:
        status: 400
        error: "Bad Request"
        message: "Bad Request"
    error401:
      value:
        status: 401
        error: "Unauthorized"
        message: "No Api Key provided"
    error403:
      value:
        status: 403
        error: "Forbidden"
        message: "Forbidden behaviour for that user"
    error404:
      value:
        status: 404
        error: "Not Found"
        message: "No object with that ID"
    error409:
      value:
        status: 409
        error: "Conflict"
        message: "Conflict with the operation"

  securitySchemes:
    apiKey:
      type: apiKey
      name: X-API-KEY #Custom headers in rails apps must have the X- prefix
      in: header