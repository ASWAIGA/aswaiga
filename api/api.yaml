openapi: 3.0.3
info:
  title: ASWAIGA
  description: |-
    Aqui va la descripcion

    Some useful links:
    - [The ASWAIGA repository](https://github.com/ASWAIGA/aswaiga)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://3.238.98.186:8080
tags:
  - name: user
    description: Everything about the users
paths:
  /users/{id}:
    put:
      tags:
        - user
      summary: Update the user associated to the id
      description: Update the user associated to the id
      operationId: UpdateUser
      parameters:
          - name: id
            in: path
            description: ID of the issue you want to update
            required: true
            schema:
              type: integer
      requestBody:
        description: User identifier
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowUser'
        '304':
          description: 'Error: Not Modified'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error304'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        '409':
          description: 'Conflict with the operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409'
      security:
        - apiKey: []
components:
  schemas:
    ShowUser:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        full_name:
          type: string
        uid:
          type: string
        bio:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        url:
          type: string
          format: uri
      example:
        id: 1
        email: example@gmail.com
        full_name: Example Surexample
        uid: 81723871837
        bio: This is a bio.
        created_at: "2023-05-12T10:17:36.259Z"
        updated_at: "2023-05-12T10:17:36.259Z"
        url: "http://IP:8080/users/1.json"
    UserUpdate:
      type: object
      properties:
        full_name:
          type: string
        bio:
          type: string
          nullable: true
      example:
        "user": {
          "full_name": "Example NewSurname",
          "bio": "This is another bio."
        }
    ErrorResult:
        type: object
        properties:
          status:
            type: integer
            enum: [304, 400, 401, 403, 404, 409]
          error:
            type: string
            enum: ["Not Modified", "Bad Request", "Unauthorized", "Forbidden", "Not Found", "Conflict"]
          message:
            type: string
  examples:
    error304:
      value:
        status: 304
        error: "Not Modified"
        message: "You have already made this action. You can not do it twice."
    error400:
      value:
        status: 400
        error: "Bad Request"
        message: "Bad Request"
    error401:
      value:
        status: 401
        error: "Unauthorized"
        message: "No Api Key provided"
    error403:
      value:
        status: 403
        error: "Forbidden"
        message: "Forbidden behaviour for that user"
    error404:
      value:
        status: 404
        error: "Not Found"
        message: "No object with that ID"
    error409:
      value:
        status: 409
        error: "Conflict"
        message: "Conflict with the operation"
  securitySchemes:
    apiKey:
      type: apiKey
      name: X-API-KEY #Custom headers in rails apps must have the X- prefix
      in: header